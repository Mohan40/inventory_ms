//File used to define controllers for product routes

const product = require("../models/productModel");
const { loggerError, loggerInfo } = require("../logger");

//Controller for creation of a product route
const createProduct = (req, res) => {
  //Check if the product listing is already avaiable
  product.find({ productName: req.body.productName }, (err, result) => {
    if (err) {
      loggerError.log({
        level: "error",
        email: "Not available",
        message: "Error generated by find().",
      });
      return res.status(400).json({
        status: "400",
        message: "Error creating the product listing.",
      });
    } else if (result.length !== 0) {
      loggerError.log({
        level: "error",
        email: "Not available",
        message: "Product listing already available.",
      });
      return res.status(400).json({
        status: "400",
        message: "Error creating the product listing.",
      });
    } else {
      //Create the document
      const productInstance = new product({
        productName: req.body.productName,
        productSpecifications: req.body.productSpecifications,
        productQuantity: req.body.productQuantity,
        productPrice: req.body.productPrice,
        deliveryChannel: req.body.deliveryChannel,
      });
      //Save the document
      productInstance.save((err) => {
        if (err) {
          loggerError.log({
            level: "error",
            email: "Not available",
            message: "Not able to save the instance.",
          });
          return res.status(400).json({
            code: "400",
            message: "Error creating the product listing.",
          });
        } else {
          loggerInfo.log({
            level: "info",
            email: req.body.email,
            message: "Success. Product listing created.",
          });
          return res.status(200).json({
            status: "200",
            message: "Success. Product listing created.",
          });
        }
      });
    }
  });
};

//Controller for searching a product route
const searchProduct = (req, res) => {
  //Check if product listing is present in DB
  product.find({ productName: req.body.productName }, (err, result) => {
    if (err) {
      loggerError.log({
        level: "error",
        email: "Not available",
        message: "Error generated by find().",
      });
      return res.status(400).json({
        status: "400",
        message: "Error searching for the product listing.",
      });
    } else if (result.length === 0) {
      loggerError.log({
        level: "error",
        email: "Not available",
        message: "No product available.",
      });
      return res.status(400).json({
        status: "400",
        message: "No product available.",
      });
    } else {
      loggerInfo.log({
        level: "info",
        email: "Not available",
        message: "Product found.",
      });

      //Send response with product details
      return res.status(200).json({
        status: "200",
        message: "Product found.",
        product: {
          id: result[0].productID,
          name: result[0].productName,
          specifications: result[0].productSpecifications,
          quantity: result[0].productQuantity,
          price: parseFloat(result[0].productPrice),
          delivery_channel: result[0].deliveryChannel,
        },
      });
    }
  });
};

//Controller for updating a product route
const updateProduct = (req, res) => {
  let errorCount = 0;
  //Check if product listing is avaliable in DB before updating
  product.find({ productName: req.body.productName }, (err, result) => {
    if (err) {
      loggerError.log({
        level: "error",
        email: "Not available",
        message: "Error generated by find().",
      });
      return res.status(400).json({
        status: "400",
        message: "Error searching for the product listing.",
      });
    } else if (result.length === 0) {
      loggerError.log({
        level: "error",
        email: "Not available",
        message: "No product available.",
      });
      return res.status(400).json({
        status: "400",
        message: "No product available.",
      });
    } else {
      const productUpdate = new Promise((resolve, reject) => {
        //Check for product specifications are sent in input and later update
        if (typeof req.body.productSpecifications !== "undefined") {
          const filter = { productName: req.body.productName };
          const update = {
            productSpecifications: req.body.productSpecifications,
          };
          product.findOneAndUpdate(
            filter,
            update,
            { runValidators: true },
            (err) => {
              if (err) {
                errorCount += 1;
                loggerError.log({
                  level: "error",
                  email: "Not available",
                  message: "Error in update function.",
                });
                return res.status(400).json({
                  status: "400",
                  message: "Unable to update product listing.",
                });
              }
            }
          );
        }
        //Check for product quantity sent in input and later update
        if (typeof req.body.productQuantity !== "undefined") {
          const filter = { productName: req.body.productName };
          const update = {
            productQuantity: req.body.productQuantity,
          };
          product.findOneAndUpdate(
            filter,
            update,
            { runValidators: true },
            (err) => {
              if (err) {
                errorCount += 1;
                loggerError.log({
                  level: "error",
                  email: "Not available",
                  message: "Error in update function.",
                });
                return res.status(400).json({
                  status: "400",
                  message: "Unable to update product listing.",
                });
              }
            }
          );
        }
        //Check for product price is sent in input and later update
        if (typeof req.body.productPrice !== "undefined") {
          const filter = { productName: req.body.productName };
          const update = { productPrice: req.body.productPrice };
          product.findOneAndUpdate(
            filter,
            update,
            { runValidators: true },
            (err) => {
              if (err) {
                errorCount += 1;
                loggerError.log({
                  level: "error",
                  email: "Not available",
                  message: "Error in update function.",
                });
                return res.status(400).json({
                  status: "400",
                  message: "Unable to update product listing.",
                });
              }
            }
          );
        }
        resolve();
      });
      productUpdate.then(() => {
        if (errorCount === 0) {
          loggerInfo.log({
            level: "info",
            email: "Not available",
            message: "Successfully updated the product listing.",
          });
          return res.status(200).json({
            status: "200",
            message: "Successfully updated the product listing.",
            productName: req.body.productName,
          });
        }
      });
    }
  });
};

//Controller for deleting a product route
const deleteProduct = (req, res) => {
  //Check if product name in req.body exists
  if (typeof req.body.productName !== "undefined") {
    //Find and delete the product listing
    product.findOneAndDelete(
      { productName: req.body.productName },
      (err, result) => {
        if (err) {
          loggerError.log({
            level: "error",
            email: "Not available",
            message: "Error in delete function.",
          });
          return res.status(400).json({
            status: "400",
            message: "Unable to delete the product listing.",
          });
        } else if (result === null) {
          loggerError.log({
            level: "error",
            email: "Not available",
            message: "No product available.",
          });
          return res.status(400).json({
            status: "400",
            message: "Unable to delete the product listing.",
          });
        } else {
          loggerInfo.log({
            level: "info",
            email: "Not available",
            message: "Successfully deleted the product listing.",
          });
          return res.status(200).json({
            status: "200",
            message: "Successfully deleted the product listing.",
            //product_name : result[0].product_name
          });
        }
      }
    );
  } else {
    loggerError.log({
      level: "error",
      email: "Not available",
      message: "Input parameter not availabele..",
    });
    return res.status(400).json({
      status: "400",
      message: "Unable to delete the product listing.",
    });
  }
};

module.exports = { createProduct, searchProduct, updateProduct, deleteProduct };
