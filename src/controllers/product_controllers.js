const product = require("../models/product_model");
const { logger_error, logger_info } = require("../logger");

const createProduct = (req, res) => {
  product.find({ product_name: req.body.product_name }, (err, result) => {
    if (err) {
      logger_error.log({
        level: "error",
        email: "Not available",
        message: "Error generated by find().",
      });
      return res.status(400).json({
        status: "400",
        message: "Error creating the product listing.",
      });
    } else if (result.length !== 0) {
      logger_error.log({
        level: "error",
        email: "Not available",
        message: "Product listing already available.",
      });
      return res.status(400).json({
        status: "400",
        message: "Error creating the product listing.",
      });
    } else {
      const product_instance = new product({
        product_name: req.body.product_name,
        product_specifications: req.body.product_specifications,
        product_quantity: req.body.product_quantity,
        product_price: req.body.product_price,
        delivery_channel: req.body.delivery_channel,
      });
      product_instance.save((err) => {
        if (err) {
          logger_error.log({
            level: "error",
            email: "Not available",
            message: "Not able to save the instance.",
          });
          return res.status(400).json({
            code: "400",
            message: "Error creating the product listing.",
          });
        } else {
          logger_info.log({
            level: "info",
            email: req.body.email,
            message: "Success. Product listing created.",
          });
          return res.status(200).json({
            status: "200",
            message: "Success. Product listing created.",
          });
        }
      });
    }
  });
};

const searchProduct = (req, res) => {
  product.find({ product_name: req.params.productName }, (err, result) => {
    if (err) {
      logger_error.log({
        level: "error",
        email: "Not available",
        message: "Error generated by find().",
      });
      return res.status(400).json({
        status: "400",
        message: "Error searching for the product listing.",
      });
    } else if (result.length === 0) {
      logger_error.log({
        level: "error",
        email: "Not available",
        message: "No product available.",
      });
      return res.status(400).json({
        status: "400",
        message: "No product available.",
      });
    } else {
      logger_info.log({
        level: "info",
        email: "Not available",
        message: "Product found.",
      });
      return res.status(200).json({
        status: "200",
        message: "Product found.",
        product: {
          id: result[0].product_id,
          name: result[0].product_name,
          specifications: result[0].product_specifications,
          quantity: result[0].product_quantity,
          price: result[0].product_price,
          delivery_channel: result[0].delivery_channel,
        },
      });
    }
  });
};

const updateProduct = (req, res) => {
  let errorCount = 0;
  product.find({ product_name: req.body.product_name }, (err, result) => {
    if (err) {
      logger_error.log({
        level: "error",
        email: "Not available",
        message: "Error generated by find().",
      });
      return res.status(400).json({
        status: "400",
        message: "Error searching for the product listing.",
      });
    } else if (result.length === 0) {
      logger_error.log({
        level: "error",
        email: "Not available",
        message: "No product available.",
      });
      return res.status(400).json({
        status: "400",
        message: "No product available.",
      });
    } else {
      async function productUpdate() {
        if (typeof req.body.product_specifications !== "undefined") {
          const filter = { product_name: req.body.product_name };
          const update = {
            product_specifications: req.body.product_specifications,
          };
          await product.findOneAndUpdate(
            filter,
            update,
            { runValidators: true },
            (err, result) => {
              if (err) {
                errorCount += 1;
                logger_error.log({
                  level: "error",
                  email: "Not available",
                  message: "Error in update function.",
                });
                return res.status(400).json({
                  status: "400",
                  message: "Unable to update product listing.",
                });
              } else {
                if (typeof req.body.product_quantity !== "undefined") {
                  const filter = { product_name: req.body.product_name };
                  const update = {
                    product_quantity: req.body.product_quantity,
                  };
                  product.findOneAndUpdate(
                    filter,
                    update,
                    { runValidators: true },
                    (err, result) => {
                      if (err) {
                        errorCount += 1;
                        logger_error.log({
                          level: "error",
                          email: "Not available",
                          message: "Error in update function.",
                        });
                        return res.status(400).json({
                          status: "400",
                          message: "Unable to update product listing.",
                        });
                      }
                    }
                  );
                }

                if (typeof req.body.product_price !== "undefined") {
                  const filter = { product_name: req.body.product_name };
                  const update = { product_price: req.body.product_price };
                  product.findOneAndUpdate(
                    filter,
                    update,
                    { runValidators: true },
                    (err, result) => {
                      if (err) {
                        errorCount += 1;
                        logger_error.log({
                          level: "error",
                          email: "Not available",
                          message: "Error in update function.",
                        });
                        return res.status(400).json({
                          status: "400",
                          message: "Unable to update product listing.",
                        });
                      }
                    }
                  );
                }
              }
            }
          );
          if (errorCount !== 0) {
          logger_info.log({
            level: "info",
            email: "Not available",
            message: "Successfully updated the product listing.",
          });
          return res.status(200).json({
            status: "200",
            message: "Successfully updated the product listing.",
          });
        }
        } 
      }
      productUpdate();
    }
  });
};

const deleteProduct = (req, res) => {

}

module.exports = { createProduct, searchProduct, updateProduct, deleteProduct };
