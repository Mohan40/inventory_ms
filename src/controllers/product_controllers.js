const product = require("../models/product_model");
const { logger_error, logger_info } = require("../logger");

const createProduct = (req, res) => {
  product.find({ product_name: req.body.product_name }, (err, result) => {
    if (err) {
      logger_error.log({
        level: "error",
        email: "Not available",
        message: "Error generated by find().",
      });
      return res.status(400).json({
        status: "400",
        message: "Error creating the product listing.",
      });
    } else if (result.length !== 0) {
      logger_error.log({
        level: "error",
        email: "Not available",
        message: "Product listing already available.",
      });
      return res.status(400).json({
        status: "400",
        message: "Error creating the product listing.",
      });
    } else {
      const product_instance = new product({
        product_name: req.body.product_name,
        product_specifications: req.body.product_specifications,
        product_quantity: req.body.product_quantity,
        product_price: req.body.product_price,
        delivery_channel: req.body.delivery_channel,
      });
      product_instance.save((err) => {
        if (err) {
          logger_error.log({
            level: "error",
            email: "Not available",
            message: "Not able to save the instance.",
          });
          return res.status(400).json({
            code: "400",
            message: "Error creating the product listing.",
          });
        }
      });
      logger_info.log({
        level: "info",
        email: req.body.email,
        message: "Success. Product listing created.",
      });
      return res
        .status(200)
        .json({ status: "200", message: "Success. Product listing created." });
    }
  });
};

const searchProduct = (req, res) => {
  product.find({ product_name: req.params.productName }, (err, result) => {
    if (err) {
      logger_error.log({
        level: "error",
        email: "Not available",
        message: "Error generated by find().",
      });
      return res.status(400).json({
        status: "400",
        message: "Error searching for the product listing.",
      });
    } else if (result.length === 0) {
      logger_error.log({
        level: "error",
        email: "Not available",
        message: "No product available.",
      });
      return res.status(400).json({
        status: "400",
        message: "No product available.",
      });
    } else {
      logger_info.log({
        level: "info",
        email: "Not available",
        message: "Product found.",
      });
      return res.status(200).json({
        status: "200",
        message: "Product found.",
        product: {
          id: result[0].product_id,
          name: result[0].product_name,
          specifications: result[0].product_specifications,
          quantity: result[0].product_quantity,
          price: result[0].product_price,
          delivery_channel: result[0].delivery_channel,
        },
      });
    }
  });
};

module.exports = { createProduct, searchProduct };
